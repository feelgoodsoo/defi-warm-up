/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RouterInterface extends utils.Interface {
  functions: {
    "bank()": FunctionFragment;
    "encode(bool,bool)": FunctionFragment;
    "getUserInfo(address,bytes)": FunctionFragment;
    "getUsers(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bank" | "encode" | "getUserInfo" | "getUsers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;

  events: {};
}

export interface Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bank(overrides?: CallOverrides): Promise<[string]>;

    encode(
      showDeposit: PromiseOrValue<boolean>,
      showStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserInfo(
      user: PromiseOrValue<string>,
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        depositBalance: BigNumber;
        depositClaimedAt: BigNumber;
        stakeBalance: BigNumber;
        stakeClaimedAt: BigNumber;
        isBlackUser: boolean;
        blockNumber: BigNumber;
      }
    >;

    getUsers(
      page: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { users_: string[]; amounts_: BigNumber[] }
    >;
  };

  bank(overrides?: CallOverrides): Promise<string>;

  encode(
    showDeposit: PromiseOrValue<boolean>,
    showStake: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserInfo(
    user: PromiseOrValue<string>,
    options: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      depositBalance: BigNumber;
      depositClaimedAt: BigNumber;
      stakeBalance: BigNumber;
      stakeClaimedAt: BigNumber;
      isBlackUser: boolean;
      blockNumber: BigNumber;
    }
  >;

  getUsers(
    page: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { users_: string[]; amounts_: BigNumber[] }
  >;

  callStatic: {
    bank(overrides?: CallOverrides): Promise<string>;

    encode(
      showDeposit: PromiseOrValue<boolean>,
      showStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserInfo(
      user: PromiseOrValue<string>,
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        depositBalance: BigNumber;
        depositClaimedAt: BigNumber;
        stakeBalance: BigNumber;
        stakeClaimedAt: BigNumber;
        isBlackUser: boolean;
        blockNumber: BigNumber;
      }
    >;

    getUsers(
      page: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { users_: string[]; amounts_: BigNumber[] }
    >;
  };

  filters: {};

  estimateGas: {
    bank(overrides?: CallOverrides): Promise<BigNumber>;

    encode(
      showDeposit: PromiseOrValue<boolean>,
      showStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserInfo(
      user: PromiseOrValue<string>,
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsers(
      page: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encode(
      showDeposit: PromiseOrValue<boolean>,
      showStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      user: PromiseOrValue<string>,
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsers(
      page: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
